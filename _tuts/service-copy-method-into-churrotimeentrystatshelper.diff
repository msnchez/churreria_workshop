diff --git a/src/AppBundle/Controller/ChurroTimeEntryController.php b/src/AppBundle/Controller/ChurroTimeEntryController.php
index 003e5c0..3cae0e2 100644
--- a/src/AppBundle/Controller/ChurroTimeEntryController.php
+++ b/src/AppBundle/Controller/ChurroTimeEntryController.php
@@ -47,63 +47,4 @@ class ChurroTimeEntryController extends Controller
             'timeEntry' => $timeEntry
         ]);
     }
-
-    /**
-     * Determines which "type" cooks the most churros on average
-     * and returns that inside an array with "type" and "average" keys.
-     *
-     * @param ChurroTimeEntry[] $timeEntries
-     * @return array
-     */
-    private function getMostEfficientTypeData(array $timeEntries)
-    {
-        $useFilter = true;
-        $today = new \DateTime('now');
-        if ($today->format('n') <= 6) {
-            // don't filter if today is January-June
-            $useFilter = false;
-        } else {
-            if (($today->format('j') === 30 || $today->format('j') === 31)
-                && $today->format('n') !== 10) {
-                // don't use filter if today is 30th/31st of July-December
-                // except for October - always use the filter in October
-                $useFilter = false;
-            }
-        }
-
-        $types = [];
-        foreach ($timeEntries as $timeEntry) {
-            if ($useFilter && $timeEntry->getStartCookingAt()->format('H') < 6) {
-                // skip
-            } else {
-                if ($useFilter && $timeEntry->getStartCookingAt()->format('H') >= 22) {
-                    // skip
-                } else {
-                    if (isset($types[$timeEntry->getType()])) {
-                        $types[$timeEntry->getType()][] = $timeEntry->getQuantityMade();
-                    } else {
-                        $types[$timeEntry->getType()] = [];
-                        $types[$timeEntry->getType()][] = $timeEntry->getQuantityMade();
-                    }
-                }
-            }
-        }
-
-        $bestType = null;
-        $avg = 0;
-        foreach ($types as $type => $data) {
-            $total = 0;
-            foreach ($data as $quantity) {
-                $total += $quantity;
-            }
-
-            $thisAverage = $total / count($data);
-            if ($thisAverage > $avg) {
-                $avg = $thisAverage;
-                $bestType = $type;
-            }
-        }
-
-        return ['type' => $bestType, 'average' => $avg];
-    }
 }
diff --git a/src/AppBundle/Service/ChurroTimeEntryStatsHelper.php b/src/AppBundle/Service/ChurroTimeEntryStatsHelper.php
new file mode 100644
index 0000000..d6578e3
--- /dev/null
+++ b/src/AppBundle/Service/ChurroTimeEntryStatsHelper.php
@@ -0,0 +1,65 @@
+<?php
+
+namespace AppBundle\Service;
+
+class ChurroTimeEntryStatsHelper
+{
+    /**
+     * Determines which "type" cooks the most churros on average
+     * and returns that inside an array with "type" and "average" keys.
+     *
+     * @param ChurroTimeEntry[] $timeEntries
+     * @return array
+     */
+    private function getMostEfficientTypeData(array $timeEntries)
+    {
+        $useFilter = true;
+        $today = new \DateTime('now');
+        if ($today->format('n') <= 6) {
+            // don't filter if today is January-June
+            $useFilter = false;
+        } else {
+            if (($today->format('j') === 30 || $today->format('j') === 31)
+                && $today->format('n') !== 10) {
+                // don't use filter if today is 30th/31st of July-December
+                // except for October - always use the filter in October
+                $useFilter = false;
+            }
+        }
+
+        $types = [];
+        foreach ($timeEntries as $timeEntry) {
+            if ($useFilter && $timeEntry->getStartCookingAt()->format('H') < 6) {
+                // skip
+            } else {
+                if ($useFilter && $timeEntry->getStartCookingAt()->format('H') >= 22) {
+                    // skip
+                } else {
+                    if (isset($types[$timeEntry->getType()])) {
+                        $types[$timeEntry->getType()][] = $timeEntry->getQuantityMade();
+                    } else {
+                        $types[$timeEntry->getType()] = [];
+                        $types[$timeEntry->getType()][] = $timeEntry->getQuantityMade();
+                    }
+                }
+            }
+        }
+
+        $bestType = null;
+        $avg = 0;
+        foreach ($types as $type => $data) {
+            $total = 0;
+            foreach ($data as $quantity) {
+                $total += $quantity;
+            }
+
+            $thisAverage = $total / count($data);
+            if ($thisAverage > $avg) {
+                $avg = $thisAverage;
+                $bestType = $type;
+            }
+        }
+
+        return ['type' => $bestType, 'average' => $avg];
+    }
+}
